package algo.sorting;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import algo.sorting.MergeSort;
import algo.sorting.QuickSort;
import algo.sorting.Sorting;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

public class SortingTest {

  @Test
  public void testQuickSort() {
    Sorting sorting = new QuickSort();
    verifySort(sorting);
  }

  @Test
  public void testMergeSort() {
    Sorting sorting = new MergeSort();
    verifySort(sorting);
  }

  private void verifySort(Sorting sorting) {
    verifySortingOrder(sorting);
    verifySingleNumberedArray(sorting);
    verifyEmptyArray(sorting);
    verifyNullCase(sorting);
    verifyAllElements(sorting);
  }

  private void verifyNullCase(Sorting sorting) {
    int[] nullResult = sorting.sort(null);
    Assertions.assertEquals(nullResult, null);
  }

  private void verifySortingOrder(Sorting sorting) {
    int[] numbers = {4, 6, 1, 5, 2, 9, 3, 8};
    int[] result = sorting.sort(numbers);
    Boolean sorted = true;
    for (int i = 0; i < result.length - 1; i++) {
      sorted = (result[i] > result[i + 1]) ? false : true;
    }
    Assertions.assertTrue(sorted);
  }

  private void verifyAllElements(Sorting sorting) {
    int[] numbers = {4, 6, 1, 5, 2, 9, 3, 8};
    int[] result = sorting.sort(Arrays.copyOf(numbers, numbers.length));
    boolean allElements = true;
    for (int i = 0; i < numbers.length - 1; i++) {
      final int key = numbers[i];
      allElements = Arrays.stream(result).anyMatch(index -> index == key);
    }
    Assertions.assertTrue(allElements);
  }

  private void verifySingleNumberedArray(Sorting sorting) {
    int[] singleNumberArr = {2};
    int[] singleNumberArrResult = sorting.sort(singleNumberArr);
    Assertions.assertEquals(singleNumberArrResult.length, 1);
  }

  private void verifyEmptyArray(Sorting sorting) {
    int[] emptyArr = {};
    int[] emptyResult = sorting.sort(emptyArr);
    Assertions.assertEquals(emptyResult.length, 0);
  }
}
